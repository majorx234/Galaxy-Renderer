#pragma once

#include <GL/glew.h>

#include <algorithm>
#include <cmath>
#include <sstream>
#include <string>

#include "Types.hpp"

#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define AT __FILE__ ":" TOSTRING(__LINE__)
#define CHECK_GL_ERROR \
  Helper::CheckGlError(" OpenGL error detected at " AT "!");

/** \brief A class to store relevant constants. */
class Helper {
 public:
  /** \brief Convert parsec to kilometre. */
  static const float PC_TO_KM;

  /** \brief Seconds per year. */
  static const float SEC_PER_YEAR;

  /** \brief Deg to radian conversion faktor. */
  static const float DEG_TO_RAD;

  /** \brief Radian to deg conversion faktor. */
  static const float RAD_TO_DEG;

  /** \brief Constant of gravity. */
  static const float CONTANT_OF_GRAVITY;

  static const float PI;

  static inline unsigned int PowerTwoFloor(unsigned int val) {
    unsigned int power = 2, nextVal = power * 2;

    while ((nextVal *= 2) <= val) {
      power = power << 1;  // *= 2;
    }

    return power << 1;  // power * 2;
  }

  static inline float rnum() { return (float)std::rand() / RAND_MAX; }

  static void CheckGlError(const char* szMsg) {
    auto errc = glGetError();
    if (errc != GL_NO_ERROR) {
      std::stringstream ss;
      ss << szMsg << " (Error 0x" << std::hex << errc << ")" << std::endl;
      throw std::runtime_error(ss.str());
    }
  }

  static inline Color ColorFromTemperature(float temp) {
    const double MinTemp = 1000;
    const double MaxTemp = 10000;
    const int colNum(200);

    const Color col[200] = {
        {1, -0.00987248, -0.0166818, 1}, {1, 0.000671682, -0.0173831, 1},
        {1, 0.0113477, -0.0179839, 1},   {1, 0.0221357, -0.0184684, 1},
        {1, 0.0330177, -0.0188214, 1},   {1, 0.0439771, -0.0190283, 1},
        {1, 0.0549989, -0.0190754, 1},   {1, 0.0660696, -0.0189496, 1},
        {1, 0.0771766, -0.0186391, 1},   {1, 0.0883086, -0.0181329, 1},
        {1, 0.0994553, -0.017421, 1},    {1, 0.110607, -0.0164945, 1},
        {1, 0.121756, -0.0153455, 1},    {1, 0.132894, -0.0139671, 1},
        {1, 0.144013, -0.0123534, 1},    {1, 0.155107, -0.0104993, 1},
        {1, 0.166171, -0.0084008, 1},    {1, 0.177198, -0.00605465, 1},
        {1, 0.188184, -0.00345843, 1},   {1, 0.199125, -0.000610485, 1},
        {1, 0.210015, 0.00249014, 1},    {1, 0.220853, 0.00584373, 1},
        {1, 0.231633, 0.00944995, 1},    {1, 0.242353, 0.0133079, 1},
        {1, 0.25301, 0.0174162, 1},      {1, 0.263601, 0.021773, 1},
        {1, 0.274125, 0.0263759, 1},     {1, 0.284579, 0.0312223, 1},
        {1, 0.294962, 0.0363091, 1},     {1, 0.305271, 0.0416328, 1},
        {1, 0.315505, 0.0471899, 1},     {1, 0.325662, 0.0529765, 1},
        {1, 0.335742, 0.0589884, 1},     {1, 0.345744, 0.0652213, 1},
        {1, 0.355666, 0.0716707, 1},     {1, 0.365508, 0.078332, 1},
        {1, 0.375268, 0.0852003, 1},     {1, 0.384948, 0.0922709, 1},
        {1, 0.394544, 0.0995389, 1},     {1, 0.404059, 0.106999, 1},
        {1, 0.41349, 0.114646, 1},       {1, 0.422838, 0.122476, 1},
        {1, 0.432103, 0.130482, 1},      {1, 0.441284, 0.138661, 1},
        {1, 0.450381, 0.147005, 1},      {1, 0.459395, 0.155512, 1},
        {1, 0.468325, 0.164175, 1},      {1, 0.477172, 0.172989, 1},
        {1, 0.485935, 0.181949, 1},      {1, 0.494614, 0.19105, 1},
        {1, 0.503211, 0.200288, 1},      {1, 0.511724, 0.209657, 1},
        {1, 0.520155, 0.219152, 1},      {1, 0.528504, 0.228769, 1},
        {1, 0.536771, 0.238502, 1},      {1, 0.544955, 0.248347, 1},
        {1, 0.553059, 0.2583, 1},        {1, 0.561082, 0.268356, 1},
        {1, 0.569024, 0.27851, 1},       {1, 0.576886, 0.288758, 1},
        {1, 0.584668, 0.299095, 1},      {1, 0.592372, 0.309518, 1},
        {1, 0.599996, 0.320022, 1},      {1, 0.607543, 0.330603, 1},
        {1, 0.615012, 0.341257, 1},      {1, 0.622403, 0.35198, 1},
        {1, 0.629719, 0.362768, 1},      {1, 0.636958, 0.373617, 1},
        {1, 0.644122, 0.384524, 1},      {1, 0.65121, 0.395486, 1},
        {1, 0.658225, 0.406497, 1},      {1, 0.665166, 0.417556, 1},
        {1, 0.672034, 0.428659, 1},      {1, 0.678829, 0.439802, 1},
        {1, 0.685552, 0.450982, 1},      {1, 0.692204, 0.462196, 1},
        {1, 0.698786, 0.473441, 1},      {1, 0.705297, 0.484714, 1},
        {1, 0.711739, 0.496013, 1},      {1, 0.718112, 0.507333, 1},
        {1, 0.724417, 0.518673, 1},      {1, 0.730654, 0.53003, 1},
        {1, 0.736825, 0.541402, 1},      {1, 0.742929, 0.552785, 1},
        {1, 0.748968, 0.564177, 1},      {1, 0.754942, 0.575576, 1},
        {1, 0.760851, 0.586979, 1},      {1, 0.766696, 0.598385, 1},
        {1, 0.772479, 0.609791, 1},      {1, 0.778199, 0.621195, 1},
        {1, 0.783858, 0.632595, 1},      {1, 0.789455, 0.643989, 1},
        {1, 0.794991, 0.655375, 1},      {1, 0.800468, 0.666751, 1},
        {1, 0.805886, 0.678116, 1},      {1, 0.811245, 0.689467, 1},
        {1, 0.816546, 0.700803, 1},      {1, 0.82179, 0.712122, 1},
        {1, 0.826976, 0.723423, 1},      {1, 0.832107, 0.734704, 1},
        {1, 0.837183, 0.745964, 1},      {1, 0.842203, 0.757201, 1},
        {1, 0.847169, 0.768414, 1},      {1, 0.852082, 0.779601, 1},
        {1, 0.856941, 0.790762, 1},      {1, 0.861748, 0.801895, 1},
        {1, 0.866503, 0.812999, 1},      {1, 0.871207, 0.824073, 1},
        {1, 0.87586, 0.835115, 1},       {1, 0.880463, 0.846125, 1},
        {1, 0.885017, 0.857102, 1},      {1, 0.889521, 0.868044, 1},
        {1, 0.893977, 0.878951, 1},      {1, 0.898386, 0.889822, 1},
        {1, 0.902747, 0.900657, 1},      {1, 0.907061, 0.911453, 1},
        {1, 0.91133, 0.922211, 1},       {1, 0.915552, 0.932929, 1},
        {1, 0.91973, 0.943608, 1},       {1, 0.923863, 0.954246, 1},
        {1, 0.927952, 0.964842, 1},      {1, 0.931998, 0.975397, 1},
        {1, 0.936001, 0.985909, 1},      {1, 0.939961, 0.996379, 1},
        {0.993241, 0.9375, 1, 1},        {0.983104, 0.931743, 1, 1},
        {0.973213, 0.926103, 1, 1},      {0.963562, 0.920576, 1, 1},
        {0.954141, 0.915159, 1, 1},      {0.944943, 0.909849, 1, 1},
        {0.935961, 0.904643, 1, 1},      {0.927189, 0.899538, 1, 1},
        {0.918618, 0.894531, 1, 1},      {0.910244, 0.88962, 1, 1},
        {0.902059, 0.884801, 1, 1},      {0.894058, 0.880074, 1, 1},
        {0.886236, 0.875434, 1, 1},      {0.878586, 0.87088, 1, 1},
        {0.871103, 0.86641, 1, 1},       {0.863783, 0.862021, 1, 1},
        {0.856621, 0.857712, 1, 1},      {0.849611, 0.853479, 1, 1},
        {0.84275, 0.849322, 1, 1},       {0.836033, 0.845239, 1, 1},
        {0.829456, 0.841227, 1, 1},      {0.823014, 0.837285, 1, 1},
        {0.816705, 0.83341, 1, 1},       {0.810524, 0.829602, 1, 1},
        {0.804468, 0.825859, 1, 1},      {0.798532, 0.82218, 1, 1},
        {0.792715, 0.818562, 1, 1},      {0.787012, 0.815004, 1, 1},
        {0.781421, 0.811505, 1, 1},      {0.775939, 0.808063, 1, 1},
        {0.770561, 0.804678, 1, 1},      {0.765287, 0.801348, 1, 1},
        {0.760112, 0.798071, 1, 1},      {0.755035, 0.794846, 1, 1},
        {0.750053, 0.791672, 1, 1},      {0.745164, 0.788549, 1, 1},
        {0.740364, 0.785474, 1, 1},      {0.735652, 0.782448, 1, 1},
        {0.731026, 0.779468, 1, 1},      {0.726482, 0.776534, 1, 1},
        {0.722021, 0.773644, 1, 1},      {0.717638, 0.770798, 1, 1},
        {0.713333, 0.767996, 1, 1},      {0.709103, 0.765235, 1, 1},
        {0.704947, 0.762515, 1, 1},      {0.700862, 0.759835, 1, 1},
        {0.696848, 0.757195, 1, 1},      {0.692902, 0.754593, 1, 1},
        {0.689023, 0.752029, 1, 1},      {0.685208, 0.749502, 1, 1},
        {0.681458, 0.747011, 1, 1},      {0.67777, 0.744555, 1, 1},
        {0.674143, 0.742134, 1, 1},      {0.670574, 0.739747, 1, 1},
        {0.667064, 0.737394, 1, 1},      {0.663611, 0.735073, 1, 1},
        {0.660213, 0.732785, 1, 1},      {0.656869, 0.730528, 1, 1},
        {0.653579, 0.728301, 1, 1},      {0.65034, 0.726105, 1, 1},
        {0.647151, 0.723939, 1, 1},      {0.644013, 0.721801, 1, 1},
        {0.640922, 0.719692, 1, 1},      {0.637879, 0.717611, 1, 1},
        {0.634883, 0.715558, 1, 1},      {0.631932, 0.713531, 1, 1},
        {0.629025, 0.711531, 1, 1},      {0.626162, 0.709557, 1, 1},
        {0.623342, 0.707609, 1, 1},      {0.620563, 0.705685, 1, 1},
        {0.617825, 0.703786, 1, 1},      {0.615127, 0.701911, 1, 1},
        {0.612469, 0.70006, 1, 1},       {0.609848, 0.698231, 1, 1},
        {0.607266, 0.696426, 1, 1},      {0.60472, 0.694643, 1, 1}};

    int idx = (int)((temp - MinTemp) / (MaxTemp - MinTemp) * colNum);
    idx = std::min(colNum - 1, idx);
    idx = std::max(0, idx);
    return col[idx];
  }

  // Velocity curve with dark matter
  static float VelocityWithDarkMatter(float r) {
    float MZ = 100;
    return 20000.0f * (float)std::sqrt(Helper::CONTANT_OF_GRAVITY *
                                       (MassHalo(r) + MassDisc(r) + MZ) / r);
  }

  // velocity curve without dark matter
  static float VelocityWithoutDarkMatter(float r) {
    float MZ = 100;
    return 20000.0f * (float)std::sqrt(Helper::CONTANT_OF_GRAVITY *
                                       (MassDisc(r) + MZ) / r);
  }

 private:
  static double MassDisc(double r) {
    float d = 2000;    // Dicke der Scheibe
    float rho_so = 1;  // Dichte im Mittelpunkt
    float rH = 2000;   // Radius auf dem die Dichte um die Hälfte gefallen ist
    return (float)rho_so * (float)std::exp(-r / rH) * (r * r) * Helper::PI * d;
  }

  static float MassHalo(float r) {
    float rho_h0 = 0.15f;  // Dichte des Halos im Zentrum
    float rC = 2500;       // typische skalenlänge im Halo
    return (float)rho_h0 * 1 / (float)(1 + std::pow(r / rC, 2)) *
           (float)(4 * Helper::PI * std::pow(r, 3) / 3);
  }
};
